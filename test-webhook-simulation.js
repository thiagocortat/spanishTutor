/**
 * Script de teste para o endpoint de simula√ß√£o do webhook
 * Este script demonstra como testar o ciclo completo sem WhatsApp real
 */

const axios = require('axios');

const SERVER_URL = 'http://localhost:3000';

async function testWebhookSimulation() {
  try {
    console.log('üß™ Testando simula√ß√£o de webhook WhatsApp...');
    console.log('=' .repeat(50));
    
    // Dados de teste
    const testData = {
      phone: '+5511999999999',
      message: 'Hola, ¬øc√≥mo est√°s?'
    };
    
    console.log('üì± Enviando mensagem de teste:');
    console.log('Telefone:', testData.phone);
    console.log('Mensagem:', testData.message);
    console.log('');
    
    // Fazer requisi√ß√£o para o endpoint de simula√ß√£o
    const response = await axios.post(`${SERVER_URL}/webhook/simulate`, testData, {
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    console.log('‚úÖ Resposta recebida:');
    console.log('Status:', response.status);
    console.log('Dados:', JSON.stringify(response.data, null, 2));
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
    if (error.response) {
      console.error('Status:', error.response.status);
      console.error('Dados:', error.response.data);
    }
  }
}

// Fun√ß√£o para testar m√∫ltiplas mensagens (conversa√ß√£o)
async function testConversation() {
  const phone = '+5511999999999';
  const messages = [
    'Hola, ¬øc√≥mo est√°s?',
    '¬øPuedes ayudarme con el espa√±ol?',
    'Quiero aprender los verbos',
    '¬øC√≥mo se dice "hello" en espa√±ol?',
    'Gracias por tu ayuda'
  ];
  
  console.log('\nüó£Ô∏è Testando conversa√ß√£o completa...');
  console.log('=' .repeat(50));
  
  for (let i = 0; i < messages.length; i++) {
    try {
      console.log(`\nüì® Mensagem ${i + 1}/${messages.length}: "${messages[i]}"`);
      
      const response = await axios.post(`${SERVER_URL}/webhook/simulate`, {
        phone: phone,
        message: messages[i]
      }, {
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      console.log('‚úÖ Resposta:', response.data.aiResponse);
      console.log('üéØ N√≠vel detectado:', response.data.detectedLevel);
      console.log('üìä Total de mensagens na sess√£o:', response.data.sessionMessages);
      
      // Aguardar um pouco entre mensagens
      await new Promise(resolve => setTimeout(resolve, 1000));
      
    } catch (error) {
      console.error(`‚ùå Erro na mensagem ${i + 1}:`, error.message);
    }
  }
}

// Fun√ß√£o para verificar o hist√≥rico da sess√£o
async function checkSessionHistory(phone) {
  try {
    console.log('\nüìö Verificando hist√≥rico da sess√£o...');
    console.log('=' .repeat(50));
    
    const response = await axios.get(`${SERVER_URL}/conversation/${encodeURIComponent(phone)}`);
    
    console.log('üì± Telefone:', response.data.phone);
    console.log('üìä Total de mensagens:', response.data.messageCount);
    console.log('‚è∞ √öltima atividade:', response.data.lastActivity);
    console.log('\nüí¨ Hist√≥rico:');
    
    response.data.conversation.forEach((msg, index) => {
      console.log(`\n${index + 1}. [${msg.timestamp}]`);
      console.log(`   üë§ Usu√°rio: ${msg.userMessage}`);
      console.log(`   ü§ñ IA: ${msg.aiResponse}`);
      console.log(`   üéØ N√≠vel: ${msg.userLevel}`);
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar hist√≥rico:', error.message);
  }
}

// Executar testes
async function runAllTests() {
  console.log('üöÄ Iniciando testes do sistema de simula√ß√£o...');
  
  // Teste 1: Mensagem √∫nica
  await testWebhookSimulation();
  
  // Aguardar um pouco
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  // Teste 2: Conversa√ß√£o completa
  await testConversation();
  
  // Teste 3: Verificar hist√≥rico
  await checkSessionHistory('+5511999999999');
  
  console.log('\nüéâ Testes conclu√≠dos!');
}

// Verificar se o servidor est√° rodando
async function checkServer() {
  try {
    const response = await axios.get(`${SERVER_URL}/status`);
    console.log('‚úÖ Servidor est√° rodando!');
    console.log('Status:', response.data.status);
    return true;
  } catch (error) {
    console.error('‚ùå Servidor n√£o est√° rodando. Inicie com: npm start');
    return false;
  }
}

// Executar
if (require.main === module) {
  checkServer().then(serverRunning => {
    if (serverRunning) {
      runAllTests();
    }
  });
}

module.exports = {
  testWebhookSimulation,
  testConversation,
  checkSessionHistory,
  runAllTests
};